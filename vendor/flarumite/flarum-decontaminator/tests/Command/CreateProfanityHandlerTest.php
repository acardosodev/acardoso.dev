<?php

/*
 * This file is part of flarumite/flarum-decontaminator.
 *
 * Copyright (c) 2020 Flarumite.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Flarumite\Tests\Decontaminator;

use Flarum\User\Exception\PermissionDeniedException;
use Flarumite\PostDecontaminator\Command\CreateProfanity;
use Flarumite\PostDecontaminator\Command\CreateProfanityHandler;
use Flarumite\PostDecontaminator\PostDecontaminatorValidator;
use Flarumite\Tests\Decontaminator\Stubs\PostDecontaminatorModel;
use Flarumite\Tests\Decontaminator\Traits\UserTestTrait;
use Illuminate\Validation\ValidationException;

/**
 * Class CreateProfanityHandlerTest.
 */
final class CreateProfanityHandlerTest extends AbstractHandlerTest
{
    use UserTestTrait;

    public $attributesArray;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->attributesArray = [
            'name'        => 'Rule',
            'regex'       => '/strawberry/mi',
            'replacement' => 'raspberry',
            'flag'        => true,
            'event'       => false,
        ];
    }

    /**
     * @group unit
     */
    public function testActorWithPermissionCanCreateProfanity(): void
    {
        $actor = $this->getAdminActor();
        $this->postDecontaminatorModel->shouldReceive('build')
            ->andReturn($this->getAttributes());

        $command = $this->getMockBuilder(CreateProfanity::class)
            ->enableOriginalConstructor()
            ->setConstructorArgs([$actor, $data = [
                'attributes' => $this->attributesArray,
            ]])
            ->getMock();

        $validator = $this->getMockBuilder(PostDecontaminatorValidator::class)
            ->disableOriginalConstructor()
            ->setMethods(['assertValid'])
            ->getMock();

        $validator->method('assertValid')
            ->willReturn('true');

        $commandHandler = new CreateProfanityHandler($validator);

        $profanity = $commandHandler->handle($command);

        $this->assertEquals(array_get($data, 'attributes.name'), $profanity->name);
        $this->assertEquals(array_get($data, 'attributes.regex'), $profanity->regex);
        $this->assertEquals(array_get($data, 'attributes.replacement'), $profanity->replacement);
        $this->assertEquals(array_get($data, 'attributes.flag'), $profanity->flag);
        $this->assertEquals(array_get($data, 'attributes.event'), $profanity->event);
    }

    /**
     * @group unit
     */
    public function testActorWithoutPermissionCannotCreateProfanityThrowsException(): void
    {
        $this->expectException(PermissionDeniedException::class);

        $actor = $this->getActor();

        $command = $this->getMockBuilder(CreateProfanity::class)
        ->enableOriginalConstructor()
        ->setConstructorArgs([$actor, []])
        ->getMock();

        $validator = $this->createMock(PostDecontaminatorValidator::class);
        $commandHandler = new CreateProfanityHandler($validator);
        $commandHandler->handle($command);
    }

    /**
     * @group unit
     */
    public function testHandleWithInvalidAttributesThrowsValidationException()
    {
        $this->expectException(ValidationException::class);
        $actor = $this->getAdminActor();
        $this->postDecontaminatorModel->shouldReceive('build')
            ->andReturn($this->getAttributes());

        $command = $this->getMockBuilder(CreateProfanity::class)
            ->enableOriginalConstructor()
            ->setConstructorArgs([$actor, $data = [
                'attributes' => [],
            ]])
            ->getMock();

        $validator = $this->getMockBuilder(PostDecontaminatorValidator::class)
            ->disableOriginalConstructor()
            ->setMethods(['assertValid'])
            ->getMock();

        $validator->method('assertValid')
            ->willThrowException(new ValidationException($validator));

        $commandHandler = new CreateProfanityHandler($validator);

        $commandHandler->handle($command);
    }

    public function getAttributes()
    {
        $response = new PostDecontaminatorModel();
        foreach ($this->attributesArray as $key=>$value) {
            $response->$key = $value;
        }

        return $response;
    }
}
